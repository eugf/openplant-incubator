[
["index.html", "A Minimal Book Example Chapter 1 Prerequisites", " A Minimal Book Example Yihui Xie 2019-10-19 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],
["general-use-cases.html", "Chapter 2 General Use Cases", " Chapter 2 General Use Cases As a plant researcher, I would like to have an incubator that can be controlled: Create schedule for light Keep temperature constant Keep humidity constant As a plant researcher, I would like to capture periodic data about plants: Pictures - once a minute Temperature - once a minute Humidity - once a minute As a plant researcher, I would like to have the data available in the cloud: Store all data on the cloud View data in real time on a Web site As a plant researcher, I would like to be able to interact with the incubator in the cloud: Receive alerts when the connection is down, or temperature is incorrect Ability to change temperature and/or light settings via a Web interface As a plant researcher, I would like to able to use analytics on the data that is captured from the incubator "],
["raspberry-pi.html", "Chapter 3 Raspberry Pi", " Chapter 3 Raspberry Pi Flash Raspbian to an SD card. Download Raspbian Stretch Lite (raspberry pi operating system image) from here. Download Etcher (a utility which helps you flash an image to an SD card) here. Flash Raspbian on a MicroSD card using Etcher. Enable SSH server before the first boot of the Raspberry Pi. View the MicroSD card on your computer. Find the “boot” partition. Right click and open a terminal. Make a file (with nothing in it) called “ssh” (no quotes.) Add a wpa_supplicant.conf file (See Appendix A). Copy and paste the file contents from Appendix A Change the hostname. (The Raspberry Pi image comprises two partitions. “root” and “boot”. Boot is readable on all operating systems (if you insert the sd card into your laptop or whatever.) Root is only readable on Linux? Maybe Mac?) This can be done in the /rootfs directory. Name your raspberry pi by changing the ‘hostname’ and ‘hosts’. Boot the Raspbian OS on the Raspberry Pi Plug the microSD card into the Pi. Power the raspberry pi with a suitable power adapter (or from the computer.) Open Terminal. Find the Raspberry Pi on the network. ping raspberrypi.local - if it is working, press ctrl c to stop Install nmap with sudo apt install nmap. Type: sudo nmap -sP 192.168.1.0/24 | awk '/^Nmap/{ip=$NF}/B8:27:EB/{print ip}' to find the ip address of the Pi. Log into the Pi Type ssh pi@raspberrypi.local or ssh pi@{ip-address} where ip-address is the one from the command directly above. Accept the “host key fingerprint” which you are told to check. During this step, you are vulnerable to a man-in-the-middle attack. Let’s assume that there is no one on the Wi-Fi who is trying to attack you. There are ways to avoid this security hole. (I.e. confirm the host key on the SD card after the first boot, but before you ever log in via SSH. Enter the password “raspberry”. You should change this. (New and temporary fix) As per this article, disable Internet Protocol version 6, as it does not play well with the Genspace Internet Service Provider. Run the following commands in a terminal window: sudo nano /etc/sysctl.conf # Add the following three lines to the bottom of the file: net.ipv6.conf.all.disable_ipv6 = 1 net.ipv6.conf.default.disable_ipv6 = 1 net.ipv6.conf.lo.disable_ipv6 = 1 #Save and close the file. #Reboot the machine. Run sudo apt-get update &amp;&amp; sudo apt-get -y upgrade to update the system run sudo raspi-config. In raspi-config turn on the camera and I2C in “Interfacing Options”. Localization Settings → Keyboard Config → Generic 105 (accept default) → English US → English us → accept all defaults Reboot Load camera code onto pi. Install the picamera library for python: sudo apt-get install python3-picamera The code example uses an AWS s3 bucket to upload the files but you can choose whichever service you want. AWS Uploading Notes Install the awscli program: sudo apt-get install awscli Configure the awscli program: aws configure Camera auto-start directions To make the program start automatically on reboot, I edited the /etc/rc.local file as follows: _IP=$(hostname -I) || true if [ &quot;$_IP&quot; ]; then printf &quot;My IP address is %s\\n&quot; &quot;$_IP&quot; fi su pi -c &#39;python3 /home/pi/kris_camera.py &amp;&#39; exit 0 Fill In Code For Connecting Arduino And Serial Script "],
["the-container.html", "Chapter 4 The Container", " Chapter 4 The Container Notes Designed for both Petri and ‘square dishes’ - 4 dishes 29cm wide interior 35cm long interior 20cm high Petri dishes are 9cm in diameter Square dishes are 10.2cm on four sides, and 7.49cm high Peltier+ device is 5+ cm both inside and outside BRING LIST * Duct tape * Box corners * Popsicle sticks * Electrical tape * Scissors * Foam core (0.25 inch thick) * Box cutter and or pocket knife Polystyrene - 6 pieces and maybe some extra * Bottom is longer in both directions * Longer side is longer * Shorter side is the same Electronics * List is on github * Waldo has many items * Kris to order lights The picture is below. The desired measurements details are as follows: 20cm by 29cm by 35cm If building, the bottom/top should longer in both directions. So, if the polystyrene is one inch thick, this means the bottom should be 2 inches (or 5+cm) longer in each dimension. The longer two side panels should be 2 inches (or 5+cm) longer in just the length The shorter two side panels should not have any additions So 2 x (34 x 40cm) 2 x (20cm x 40cm) 2 x (20cm by 29 cm) "],
["arduino.html", "Chapter 5 Arduino", " Chapter 5 Arduino The layout for the Arduino. What you need: Arduino (Uno) Mosfet x 2 Check the code (incubator_main.ino in https://github.com/genspace/openplant-incubator) for which pins on the Arduino to connect the lights and Peltier to. As of 10/12/19, the lights go to pin 4 and the Peltier goes to pin 5. The Mosfet, I think it’s the one above, or the one in the link below. You can always to a Google search on the. https://cdn.sparkfun.com/datasheets/Components/General/FQP30N06L.pdf The Peltier Module TEC1-12706 https://www.electron.com/media/389/datasheet-601-017.pdf?&amp;key=ZGpmIyQwNUZfMzg5 Wire the Temperature/Humidity sensor (SHT31) according to this diagram: Fan Wiring: We don’t need to wire Sense or Control because we leave the fans always on. https://allpinouts.org/pinouts/connectors/motherboards/motherboard-cpu-4-pin-fan/ Real Time Clock wiring GND to GND on your board VCC to the logic level power of your board (on classic Arduinos &amp; Metros use 5V, on 3.3V devices use 3.3V) SDA to the SDA i2c data pin (A4) SCL to the SCL i2c clock pin (A5) https://learn.adafruit.com/adafruit-pcf8523-real-time-clock/rtc-with-arduino https://learn.adafruit.com/adafruit-metro-mini/pinouts Set the time by running the example script: https://github.com/adafruit/RTClib/blob/master/examples/pcf8523/pcf8523.ino Power Supply goes into the rails – black into one, and red into another.. Uploading code into an Arduino (in our case the Adafruit Metro Mini, which is equivalent to the Arduino Uno.) Install the Arduino IDE Open the IDE. (This gives a blank document. Just “setup()” and “loop()” functions Select the board. (In tools?) Select the serial device which you’re using. (Windows? COM1 ?) Lots of restarting if the serial port is not found. Open a (second) window using File → Examples → Basic(?) → Blink Build and upload buttons are the check mark and the arrow, respectively "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References Raspberry Pi Onboard LEDs: Guide sudo sh -c &quot;echo none &gt; /sys/class/leds/led0/trigger&quot; # Static LED off sudo sh -c &quot;echo default-on &gt; /sys/class/leds/led0/trigger&quot; # Static LED on sudo sh -c &quot;echo mmc0 &gt; /sys/class/leds/led0/trigger&quot; # The normal behaviour Appendix A Configuring what WiFi access point the Raspberry Pi will connect to before booting it for the first time. (This way, you don’t need a monitor and keyboard to configure the Pi.) Put the “ssh” file (empty) in the “boot” partition of the SD card. (Already mentioned in the main steps.) Put this in a text file named “wpa_supplicant.conf” in the “boot” partition of the SD card. country=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&quot;Genspace&quot; scan_ssid=1 psk=&quot;Microbes&quot; key_mgmt=WPA-PSK } Additional Raspberry Pi Notes auto re-start $ su pi -c ‘python3 /home/pi/kris_camera.py &amp;’ Alternatively, this can be done with the ‘pi’ user’s crontab. Camera / Tongue Depressor measurements: The Camera should be inches from bottom. (Let’s say 6 or 7 inches) Square easier than round. Exacto-type knife is better than drilling for tongue depressors. The camera has a lens holder that is circular – 0.289 inches in diameter The square pieces that holds the camera is 0.336 inches in diameter. Check this link for camera resolution: https://picamera.readthedocs.io/en/release-1.12/fov.html "]
]
